+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 8000
}

+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class =HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class =HttpDirectoryResource
        BaseDir = "/home/pi/MARTe2-F4E/MARTe2_armv8/Resources/HTTP/"
    }
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOSTATE1 = {
            Class = Message
            Destination = StateMachine
            Function = GOTOSTATE1
            Mode = ExpectsReply
        }
        +GOTOSTATE2 = {
            Class = Message
            Destination = StateMachine
            Function = GOTOSTATE2
            Mode = ExpectsReply
        }
        +RESET = {
            Class = Message
            Destination = StateMachine
            Function = RESET
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8040
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 4
    MinNumberOfThreads = 1
    CPUMask=0x3
}

+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "STATE1"
            NextStateError = "ERROR"
            Timeout = 0
          +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Function = "Start"
                Mode = ExpectsReply
            }    
            +ChangeToState1Msg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State1
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +STATE1 = {
        Class = ReferenceContainer
        +GOTOSTATE2 = {
            Class = StateMachineEvent
            NextState = "STATE2"
            NextStateError = "ERROR"
            Timeout = 0
            +PrepareChangeToState2Msg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State2
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
        }
    }
    +STATE2 = {
        Class = ReferenceContainer
        +GOTOSTATE1 = {
            Class = StateMachineEvent
            NextState = "STATE1"
            NextStateError = "ERROR"
            Timeout = 0
            +PrepareChangeToState1Msg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State1
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }

        }
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = StateError
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "STATE1"
            NextStateError = "STATE1"
            Timeout = 0
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToState1Msg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = State1
                }
            }
           +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}







$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 333.333333333
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource =DDB1
                    Type = uint32
                }            
            }
        }
	 +waveformSin1 = {
	     Class = WaveformGAM::WaveformSin
	     Amplitude = 0.0005
	     Frequency = 1
	     Phase = 0.0
	     Offset = 0
//	     StartTriggerTime = {0.1 0.3 0.5 1.8}
//	     StopTriggerTime = {0.2 0.4 0.6} //the StopTriggerTime has one time value less. It means that after the sequence of output on and off, the GAM will remain on forever
	     InputSignals = {
		 Time = {
		     DataSource = "DDB1"
		     Type = uint32 //Supported type uint32 (int32 | uint64 int64 also valid)
		 }
	     }
	     OutputSignals = {
		 Sine1 = {
		     DataSource = DDB1
		     Type = float32
		 }
	     }
	 }
	 +Conversion1 = {
	     Class = ConversionGAM
	     InputSignals = {
		 Sine1 = {
		     DataSource = DDB1
		     Type = float32
		     Samples = 1
		     Elements = 1
		 }
	     }
	     OutputSignals = {
		 Sine164 = {
		     DataSource = DDB1
		     Type = float64
		     Elements = 1
		    
		 }
	     }
	 }	
	 +SSMGAM1 = {
	     Class = SSMGAM
	     StateMatrix = {{ 1.981269150869976  -0.982161032358301}{ 1.0  0.0}} //Compulsory
	     InputMatrix = {{0.031250000000000} {0.0}} //Compulsory
	     OutputMatrix = {{0.028625830355573   0.028454584897187}} //Compulsory
	     FeedthroughMatrix = {{0.0}} //Optional
	     ResetInEachState = 1//Compulsory. 1--> reset in each state, 0--> reset if the previous state is different from the next state
	     SampleFrequency = 0.003 // Currently optional and not used.
	     InputSignals = {
		 Sine164 = { //input of the SS
		     DataSource = "DDB1"
		     Type = float64 //Only supported type.
		     NumberOfElements = 1
		     NumberOfDimensions = 1 // or 0
		     Samples = 1
		 }
	     }
	     OutputSignals = {
		 OutputSignal1 = {
		     DataSource = DDB1
		     Type = float64
		 }
		 OutputSignal2 = {
		     DataSource = DDB1
		     Type = float64 //Only supported type.
		     NumberOfElements = 1
		     NumberOfDimensions = 1
		     Samples = 1
		 }
		 OutputSignal3 = {
		     DataSource = DDB1
		     Type = float64 //Only supported type.
		     NumberOfElements = 1
		     NumberOfDimensions = 1
		     Samples = 1
		 }
	     }
	 }
	+Display={
		Class=IOGAM
            	InputSignals = {
		        Counter = {
		            DataSource = DDB1
		            Type = uint32
		        }                
		        Time = {
		            DataSource = DDB1
		            Type = uint32
		        }            
                	CycleTime = {
                    		DataSource = Timings
                    		Type = uint32
				Alias= State2.Thread1_CycleTime
                	}
			Sine164 = {
		     		DataSource = DDB1
		     		Type = float64
		 	}
			 OutputSignal1 = {
			     DataSource = DDB1
			     Type = float64
			 }
		}
		OutputSignals = {
		        Counter = {
		            DataSource = FileWriter_0 
		            Type = uint32
		        }                
		        Time = {
		            DataSource = FileWriter_0 
		            Type = uint32
		        }            
                	CycleTime = {
				DataSource = FileWriter_0 
				Type=uint32
			}
			Sine164 = {
		     		DataSource =  FileWriter_0 
		     		Type = float64
		 	}
		        ModelOut = {
			     DataSource = FileWriter_0 
			     Type = float64
			 }	
		}
	}
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
	 +DDB1 = {
            Class = GAMDataSource
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
	    Frequency=1.0
	    CPUMask=0x2
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }       

	 +FileWriter_0 = {
	    Class = FileDataSource::FileWriter
	    NumberOfBuffers = 100 //Compulsory. Number of buffers in the circular buffer defined above. Each buffer is capable of holding a copy of all the DataSourceI signals.
	    CPUMask = 0x4 //Compulsory. Affinity assigned to the threads responsible for asynchronously flush data into the file.
	    StackSize = 10000000 //Compulsory. Stack size of the thread above.
	    Filename = "test.csv" //Optional. If not set the filename shall be set using the OpenFile RPC.
	    Overwrite = "yes" //Compulsory. If "yes" the file will be overwritten, otherwise new data will be added to the end of the existent file.
	    FileFormat = "csv" //Compulsory. Possible values are: binary and csv.
	    CSVSeparator = "," //Compulsory if Format=csv. Sets the file separator type.
	    StoreOnTrigger = 0 //Compulsory. If 0 all the data in the circular buffer is continuously stored. If 1 data is stored when the Trigger signal is 1 (see below).
	 
	    Signals = {
		Time = {
                    		Type = uint32
	        }
		Counter = {
                    		Type = uint32
	        }

		CycleTime = {
                    		Type = uint32
	        }

		Sine164 = {
		     		Type = float64
	 	}
		ModelOut = {
			     Type = float64
		 }	
	    }
	} 
    }
    +States = {
        Class = ReferenceContainer
        +State1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }
	 +State2 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer waveformSin1 Conversion1 SSMGAM1 Display}
                }
            }
        }
        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}

